{"version":3,"sources":["../src/styled.js"],"names":["styled","base","styles","createStyledElement","concat","resolveDataAndChildren","args","data","children","length","arg","Array","isArray","sel","tagName","stylesArray","element","resolvedStyles","resolveStylesArray","className","injectStylePrefixed","classFromAttrs","attrs","class","forEach","style","Object","assign"],"mappings":"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","file":"styled.js","sourcesContent":["import { h } from '@cycle/dom';\nimport utils from 'styletron-utils';\n\nimport { TAG_NAME, STYLES } from './constants.js';\nimport initStyletron from './init-styletron.js';\n\nexport default function styled (base, styles) {\n  // base is an html tag string\n  if (typeof base === 'string') {\n    return createStyledElement(base, [styles]);\n  }\n\n  // base is another styled element\n  if (typeof base === 'function' && base[TAG_NAME] && base[STYLES]) {\n    return createStyledElement(base[TAG_NAME], base[STYLES].concat(styles));\n  }\n}\n\nfunction resolveDataAndChildren (args) {\n  let data = {};\n  let children = [];\n\n  if (args.length === 1) {\n    const arg = args[0];\n\n    if (Array.isArray(arg) || arg.sel || typeof arg === 'string') {\n      // children, vdom, or text\n      children = Array.isArray(arg) ? arg : [arg];\n    } else {\n      // props object\n      data = arg;\n    }\n  } else if (args.length === 2) {\n    data = args[0];\n    children = Array.isArray(args[1]) ? args[1] : [args[1]];\n  }\n\n  return { data, children };\n}\n\nfunction createStyledElement (tagName, stylesArray) {\n  const element = (...args) => {\n    const { data, children } = resolveDataAndChildren(args);\n    const resolvedStyles = resolveStylesArray(stylesArray, data);\n    const className = utils.injectStylePrefixed(initStyletron(), resolvedStyles);\n    const classFromAttrs = data.attrs && data.attrs.class ? data.attrs.class : '';\n\n    if (!data.attrs) data.attrs = { class: className };\n    else if (!data.attrs.class) data.attrs.class = className;\n    else if (classFromAttrs) data.attrs.class += className;\n\n    return h(tagName, data, children);\n  };\n  element[TAG_NAME] = tagName;\n  element[STYLES] = stylesArray;\n  return element;\n}\n\nfunction resolveStylesArray (stylesArray, data) {\n  const resolvedStyles = {};\n\n  stylesArray.forEach(style => {\n    if (typeof style === 'object') return Object.assign(resolvedStyles, style);\n    if (typeof style === 'function') return Object.assign(resolvedStyles, style(data));\n  });\n\n  return resolvedStyles;\n}\n"]}